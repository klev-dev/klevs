// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: proto/logs.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Logs_List_FullMethodName   = "/api.Logs/List"
	Logs_Create_FullMethodName = "/api.Logs/Create"
	Logs_Delete_FullMethodName = "/api.Logs/Delete"
)

// LogsClient is the client API for Logs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsClient interface {
	List(ctx context.Context, in *LogsListRequest, opts ...grpc.CallOption) (*LogsListResponse, error)
	Create(ctx context.Context, in *LogsCreateRequest, opts ...grpc.CallOption) (*LogsCreateResponse, error)
	Delete(ctx context.Context, in *LogsDeleteRequest, opts ...grpc.CallOption) (*LogsDeleteResponse, error)
}

type logsClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsClient(cc grpc.ClientConnInterface) LogsClient {
	return &logsClient{cc}
}

func (c *logsClient) List(ctx context.Context, in *LogsListRequest, opts ...grpc.CallOption) (*LogsListResponse, error) {
	out := new(LogsListResponse)
	err := c.cc.Invoke(ctx, Logs_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logsClient) Create(ctx context.Context, in *LogsCreateRequest, opts ...grpc.CallOption) (*LogsCreateResponse, error) {
	out := new(LogsCreateResponse)
	err := c.cc.Invoke(ctx, Logs_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logsClient) Delete(ctx context.Context, in *LogsDeleteRequest, opts ...grpc.CallOption) (*LogsDeleteResponse, error) {
	out := new(LogsDeleteResponse)
	err := c.cc.Invoke(ctx, Logs_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogsServer is the server API for Logs service.
// All implementations must embed UnimplementedLogsServer
// for forward compatibility
type LogsServer interface {
	List(context.Context, *LogsListRequest) (*LogsListResponse, error)
	Create(context.Context, *LogsCreateRequest) (*LogsCreateResponse, error)
	Delete(context.Context, *LogsDeleteRequest) (*LogsDeleteResponse, error)
	mustEmbedUnimplementedLogsServer()
}

// UnimplementedLogsServer must be embedded to have forward compatible implementations.
type UnimplementedLogsServer struct {
}

func (UnimplementedLogsServer) List(context.Context, *LogsListRequest) (*LogsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedLogsServer) Create(context.Context, *LogsCreateRequest) (*LogsCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLogsServer) Delete(context.Context, *LogsDeleteRequest) (*LogsDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLogsServer) mustEmbedUnimplementedLogsServer() {}

// UnsafeLogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsServer will
// result in compilation errors.
type UnsafeLogsServer interface {
	mustEmbedUnimplementedLogsServer()
}

func RegisterLogsServer(s grpc.ServiceRegistrar, srv LogsServer) {
	s.RegisterService(&Logs_ServiceDesc, srv)
}

func _Logs_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logs_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServer).List(ctx, req.(*LogsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logs_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logs_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServer).Create(ctx, req.(*LogsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logs_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logs_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServer).Delete(ctx, req.(*LogsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Logs_ServiceDesc is the grpc.ServiceDesc for Logs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Logs",
	HandlerType: (*LogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Logs_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Logs_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Logs_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logs.proto",
}
